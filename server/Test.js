// Generated by CoffeeScript 1.6.3
(function() {
  var Database, Game, Lobby, Player, Room, TestGame, TestPlayer, defineMethod, sql, testGame,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  defineMethod = function(classname, name, value) {
    return Object.defineProperty(classname.prototype, name, {
      enumerable: false,
      value: value
    });
  };

  defineMethod(Array, 'remove', function(item) {
    return this.removeIf(function(i) {
      return i === item;
    });
  });

  defineMethod(Array, 'removeIf', function(fn) {
    var _ref;
    return ([].splice.apply(this, [0, 9e9].concat(_ref = this.filter(function(i) {
      return !fn(i);
    }))), _ref);
  });

  Room = (function() {
    function Room(dispatchTable) {
      this.dispatchTable = dispatchTable;
      this.players = [];
    }

    Room.prototype.onRequest = function(player, request) {
      var handler, p, _i, _len, _ref;
      handler = this.dispatchTable[request.cmd];
      if (handler != null) {
        handler.apply(this, [player, request]);
      }
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        p.flush();
      }
      return player.flush();
    };

    Room.prototype.onPlayerJoin = function(player) {
      return this.players.push(player);
    };

    Room.prototype.onPlayerLeave = function(player) {
      return this.players.remove(player);
    };

    return Room;

  })();

  Lobby = (function(_super) {
    __extends(Lobby, _super);

    function Lobby(db) {
      this.db = db;
      Lobby.__super__.constructor.call(this, {
        'chat': this.onChat,
        'join': this.onJoin
      });
      this.nextId = 1;
      this.games = {};
    }

    Lobby.prototype.onPlayerJoin = function(player) {
      var gameId, _i, _len, _ref, _results;
      Lobby.__super__.onPlayerJoin.apply(this, arguments);
      _ref = Object.keys(this.games);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        gameId = _ref[_i];
        _results.push(player.send('+game', {
          id: gameId
        }));
      }
      return _results;
    };

    Lobby.prototype.onGameEnd = function(game) {
      var p, _i, _len, _ref;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        p.send('-game', {
          id: game.id
        });
      }
      return delete this.games[game.id];
    };

    Lobby.prototype.onChat = function(player, request) {
      var p, _i, _len, _ref, _results;
      _ref = this.players;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _results.push(p.send('chat', {
          player: player.name,
          msg: request.msg
        }));
      }
      return _results;
    };

    Lobby.prototype.onJoin = function(player, request) {
      var gameId, p, room, _i, _len, _ref;
      gameId = request.id;
      if (gameId == null) {
        gameId = this.nextId++;
        this.games[gameId] = new Game(gameId, this, this.db);
        _ref = this.players;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          if (p !== player) {
            p.send('+game', {
              id: gameId
            });
          }
        }
      }
      room = this.games[gameId];
      if (room == null) {
        return player.sendMsg('Cannot join game');
      } else {
        return player.setRoom(room);
      }
    };

    return Lobby;

  })(Room);

  Game = (function(_super) {
    __extends(Game, _super);

    function Game(id, parentRoom, db) {
      this.id = id;
      this.parentRoom = parentRoom;
      this.db = db;
      Game.__super__.constructor.call(this, {
        'leave': this.onLeave,
        'chat': this.onChat,
        'spychat': this.onSpyChat,
        'choose': this.onChoose,
        'choosePlayers': this.onChoosePlayers,
        'chooseGiveCard': this.onChooseGiveCard,
        'chooseTakeCard': this.onChooseTakeCard
      });
      this.nextId = 1;
      this.leader = 0;
      this.activePlayers = [];
      this.spies = [];
      this.questions = [];
      this.status = '';
      this.gameStarted = false;
      this.gameFinished = false;
      this.log = [];
      this.cards = [];
      this.opinionMakers = [];
      this.mission = 1;
      this.round = 1;
      this.score = [];
      this.cardName = {
        KeepingCloseEye: 'KEEPING A CLOSE EYE ON YOU',
        EstablishConfidence: 'ESTABLISH CONFIDENCE',
        StrongLeader: 'STRONG LEADER',
        Overheard: 'OVERHEARD CONVERSATION',
        NoConfidence: 'NO CONFIDENCE',
        InTheSpotlight: 'IN THE SPOTLIGHT',
        OpenUp: 'OPEN UP',
        TakeResponsibility: 'TAKE RESPONSIBILITY',
        OpinionMaker: 'OPINION MAKER'
      };
    }

    Game.prototype.onRequest = function(player, request) {
      var _ref;
      this.nextId++;
      if ((this.dbId != null) && ((_ref = request.cmd) !== 'chat' && _ref !== 'spychat')) {
        this.db.updateGame(this.dbId, player.id, request, function() {});
      }
      return Game.__super__.onRequest.apply(this, arguments);
    };

    Game.prototype.onPlayerJoin = function(player) {
      var c, log, p, q, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3;
      Game.__super__.onPlayerJoin.apply(this, arguments);
      player.send('join');
      this.sendPlayers(player);
      player.send('status', {
        msg: this.status
      });
      _ref = this.log;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        log = _ref[_i];
        player.send('gameLog', log);
      }
      _ref1 = this.opinionMakers;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        p = _ref1[_j];
        player.send('opinionMaker', {
          player: p.id
        });
      }
      _ref2 = this.cards;
      for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
        c = _ref2[_k];
        player.send('+card', {
          player: c.player.id,
          card: card
        });
      }
      if (this.gameStarted) {
        player.send('scoreboard', this.getScoreboard());
      }
      _ref3 = this.questions;
      for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {
        q = _ref3[_l];
        if (q.player.id === player.id) {
          player.send(q.question.cmd, q.question);
        }
      }
      if (this.players.length === 1) {
        this.addActivePlayer(player);
      } else {
        this.askToJoinGame(player);
      }
      return player.send('leader', {
        player: this.activePlayers[this.leader].id
      });
    };

    Game.prototype.onPlayerLeave = function(player) {
      var p, players, _i, _len;
      Game.__super__.onPlayerLeave.apply(this, arguments);
      if (!this.gameStarted || this.gameFinished) {
        this.activePlayers.removeIf(function(i) {
          return i.id === player.id;
        });
        this.onPlayersChanged();
      }
      if (this.activePlayers.length === 0) {
        players = this.players;
        this.players = [];
        for (_i = 0, _len = players.length; _i < _len; _i++) {
          p = players[_i];
          this.onLeave(p);
        }
        this.parentRoom.onGameEnd(this);
      }
    };

    Game.prototype.onChat = function(player, request) {
      var p, _i, _len, _ref, _results;
      _ref = this.players;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _results.push(p.send('chat', {
          player: player.name,
          msg: request.msg
        }));
      }
      return _results;
    };

    Game.prototype.onSpyChat = function(player, request) {
      var p, _i, _len, _ref, _results;
      if (!this.spies.some(function(i) {
        return i.id === player.id;
      })) {
        return;
      }
      _ref = this.spies || [];
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _results.push(p.send('spychat', {
          player: player.name,
          msg: request.msg
        }));
      }
      return _results;
    };

    Game.prototype.onLeave = function(player, request) {
      player.send('leave');
      return player.setRoom(this.parentRoom);
    };

    Game.prototype.onChoose = function(player, request) {
      var question, _ref;
      question = this.findQuestion(player, request);
      if (_ref = request.choice, __indexOf.call(question.question.choices, _ref) < 0) {
        throw "Invalid response";
      }
      return this.answerQuestion(question, request.choice);
    };

    Game.prototype.onChoosePlayers = function(player, request) {
      var choice, question, _i, _len, _ref;
      question = this.findQuestion(player, request);
      if (request.choice.length !== question.question.n) {
        throw "Incorrect number of players";
      }
      _ref = request.choice;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        choice = _ref[_i];
        if (__indexOf.call(question.question.players, choice) < 0) {
          throw "Invalid player";
        }
      }
      return this.answerQuestion(question, (function() {
        var _j, _len1, _ref1, _results;
        _ref1 = request.choice;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          choice = _ref1[_j];
          _results.push(this.findPlayer(choice));
        }
        return _results;
      }).call(this));
    };

    Game.prototype.onChooseTakeCard = function(player, request) {
      var card, question, _i, _len, _ref, _ref1;
      question = this.findQuestion(player, request);
      if (_ref = request.choice.player, __indexOf.call(question.question.players, _ref) < 0) {
        throw "Invalid player";
      }
      _ref1 = this.cards;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        card = _ref1[_i];
        if (card.card === request.choice.card && card.player.id === request.choice.player) {
          return this.answerQuestion(question, {
            card: request.choice.card,
            player: this.findPlayer(request.choice.player)
          });
        }
      }
      throw "Invalid card";
    };

    Game.prototype.onChooseGiveCard = function(player, request) {
      var question, _ref;
      question = this.findQuestion(player, request);
      if (_ref = request.choice, __indexOf.call(question.question.players, _ref) < 0) {
        throw "Invalid player";
      }
      return this.answerQuestion(question, this.findPlayer(request.choice));
    };

    Game.prototype.addActivePlayer = function(player) {
      var playerShim;
      playerShim = {
        thisGame: this,
        send: function() {
          if (this.room === this.thisGame) {
            return this.__proto__.send.apply(this, arguments);
          }
        },
        sendMsg: function() {
          if (this.room === this.thisGame) {
            return this.__proto__.sendMsg.apply(this, arguments);
          }
        }
      };
      playerShim.__proto__ = player;
      this.activePlayers.push(playerShim);
      return this.onPlayersChanged();
    };

    Game.prototype.askToJoinGame = function(player) {
      var _this = this;
      if (this.gameStarted) {
        return;
      }
      return this.askQuestion(player, 'choose', {
        msg: 'Click "join" to join the game.',
        choices: ['Join', 'Leave']
      }, function(response) {
        if (response.choice === 'Leave') {
          return _this.onLeave;
        }
        if (_this.activePlayers.length >= 10) {
          player.sendMsg('This game is currently full.');
          return _this.askToJoinGame(player);
        } else {
          return _this.addActivePlayer(player);
        }
      });
    };

    Game.prototype.askToStartGame = function() {
      var gameController,
        _this = this;
      gameController = this.activePlayers[0];
      if (this.activePlayers.length < 5) {
        return this.setStatus('Waiting for more players ...');
      } else {
        this.setStatus("Waiting for " + gameController + " to start the game ...");
        if (this.questions.every(function(i) {
          return i.player !== gameController;
        })) {
          return this.askQuestion(gameController, 'choose', {
            msg: 'Press OK to start game',
            choices: ['OK']
          }, function() {
            if (_this.activePlayers.length < 5) {
              return _this.askToStartGame();
            }
            return _this.startGame();
          });
        }
      }
    };

    Game.prototype.startGame = function() {
      var p, state, _i, _len, _ref,
        _this = this;
      state = this.getInitialState();
      this.spies = state.spies;
      this.leader = state.leader;
      this.deck = state.deck;
      this.gameStarted = true;
      this.onPlayersChanged();
      this.missionTeamSizes = [[2, 3, 2, 3, 3], [2, 3, 4, 3, 4], [2, 3, 3, 4, 4], [3, 4, 4, 5, 5], [3, 4, 4, 5, 5], [3, 4, 4, 5, 5]][this.activePlayers.length - 5];
      _ref = this.activePlayers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        p.sendMsg("You are " + (__indexOf.call(this.spies, p) >= 0 ? 'a SPY' : 'RESISTANCE') + "!");
      }
      return this.db.createGame({
        deck: this.deck,
        leader: this.leader
      }, (function() {
        var _j, _len1, _ref1, _results;
        _ref1 = this.activePlayers;
        _results = [];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          p = _ref1[_j];
          _results.push(p.id);
        }
        return _results;
      }).call(this), function(err, result) {
        _this.dbId = result.id;
        return _this.nextRound();
      });
    };

    Game.prototype.nextRound = function() {
      var _this = this;
      if (this.round > 5) {
        return this.spiesWin();
      }
      this.leader = (this.leader + 1) % this.activePlayers.length;
      this.sendAll('leader', {
        player: this.activePlayers[this.leader].id
      });
      this.sendAll('scoreboard', this.getScoreboard());
      this.gameLog("" + this.activePlayers[this.leader] + " is the mission leader.");
      return this.ask(this.whoeverHas('StrongLeader'), 'deciding whether they want to use STRONG LEADER ...', 'choose', {
        msg: 'Do you want to use STRONG LEADER?',
        choices: ['Yes', 'No']
      }, function(responses) {
        var response, strongLeader, _i, _len;
        strongLeader = null;
        for (_i = 0, _len = responses.length; _i < _len; _i++) {
          response = responses[_i];
          if (response.choice === 'Yes') {
            if (strongLeader != null) {
              response.player.sendMsg('#{strongLeader} has already used STRONG LEADER this round.');
            } else {
              strongLeader = response.player;
              _this.leader = _this.activePlayers.indexOf(strongLeader);
              _this.sendAllMsgAndGameLog("" + strongLeader + " used STRONG LEADER.");
              _this.sendAll('leader', {
                player: strongLeader.id
              });
              _this.subCard(strongLeader, 'StrongLeader');
              _this.distributeCards();
            }
          }
        }
        if (strongLeader == null) {
          return _this.distributeCards();
        }
      });
    };

    Game.prototype.distributeCards = function() {
      var cardsRequired, i, _i, _results;
      if (this.round !== 1) {
        return this.askLeaderForTeam();
      }
      cardsRequired = Math.floor((this.activePlayers.length - 3) / 2);
      this.setStatus("" + this.activePlayers[this.leader] + " is distributing card(s) ...");
      _results = [];
      for (i = _i = 0; 0 <= cardsRequired ? _i < cardsRequired : _i > cardsRequired; i = 0 <= cardsRequired ? ++_i : --_i) {
        _results.push(this.distributeCard(this.deck.shift()));
      }
      return _results;
    };

    Game.prototype.distributeCard = function(card) {
      var checkDoneDistributingCards, showIdentityTo,
        _this = this;
      checkDoneDistributingCards = function() {
        var q;
        if (((function() {
          var _i, _len, _ref, _ref1, _results;
          _ref = this.questions;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            q = _ref[_i];
            if (_ref1 = q.player, __indexOf.call(this.activePlayers, _ref1) >= 0) {
              _results.push(q);
            }
          }
          return _results;
        }).call(_this)).length === 0) {
          return _this.askLeaderForTeam();
        }
      };
      showIdentityTo = function(src, dest) {
        dest.sendMsg("" + src + " is " + (__indexOf.call(_this.spies, src) >= 0 ? 'a SPY' : 'RESISTANCE') + "!");
        return checkDoneDistributingCards();
      };
      if (card === 'EstablishConfidence') {
        return this.askQuestion(this.activePlayers[this.leader], 'choosePlayers', {
          msg: 'You have ESTABLISH CONFIDENCE. Choose who to reveal your identity to.',
          n: 1,
          players: this.getIds(this.everyoneExcept([this.activePlayers[this.leader]]))
        }, function(response) {
          _this.sendAllMsgAndGameLog("" + response.player + " used ESTABLISH CONFIDENCE to show their identity to " + response.choice[0] + ".");
          return showIdentityTo(response.player, response.choice[0]);
        });
      }
      return this.askQuestion(this.activePlayers[this.leader], 'chooseGiveCard', {
        card: card,
        players: this.getIds(this.everyoneExcept([this.activePlayers[this.leader]]))
      }, function(response) {
        _this.sendAllMsgAndGameLog("" + response.player + " gave " + _this.cardName[response.question.card] + " to " + response.choice + ".");
        switch (response.question.card) {
          case 'Overheard':
            return _this.askQuestion(response.choice, 'choosePlayers', {
              msg: 'Choose who you want to use OVERHEARD CONVERSATION on.',
              n: 1,
              players: _this.getIds(_this.neighboringPlayers(response.choice))
            }, function(response) {
              _this.sendAllMsgAndGameLog("" + response.player + " used OVERHEARD CONVERSATION to learn the identity of " + response.choice[0] + ".");
              return showIdentityTo(response.choice[0], response.player);
            });
          case 'OpenUp':
            return _this.askQuestion(response.choice, 'choosePlayers', {
              msg: 'Choose who you want to reveal your identity to.',
              n: 1,
              players: _this.getIds(_this.everyoneExcept([response.choice]))
            }, function(response) {
              _this.sendAllMsgAndGameLog("" + response.player + " used OPEN UP to show their identity to " + response.choice[0] + ".");
              return showIdentityTo(response.player, response.choice[0]);
            });
          case 'TakeResponsibility':
            if (_this.cards.length === 0) {
              _this.sendAllMsgAndGameLog("TAKE RESPONSIBILITY was not used, since no one has any cards.");
              return checkDoneDistributingCards();
            } else {
              return _this.askQuestion(response.choice, 'chooseTakeCard', {
                players: _this.getIds(_this.everyoneExcept([response.choice]))
              }, function(response) {
                _this.sendAllMsgAndGameLog("" + response.player + " used TAKE RESPONSIBILITY to take " + _this.cardName[response.choice.card] + " from " + response.choice.player + ".");
                _this.subCard(response.choice.player, response.choice.card);
                _this.addCard(response.player, response.choice.card);
                return checkDoneDistributingCards();
              });
            }
            break;
          case 'OpinionMaker':
            _this.opinionMakers.push(response.choice);
            _this.sendAll('opinionMaker', {
              player: response.choice.id
            });
            return checkDoneDistributingCards();
          default:
            _this.addCard(response.choice, response.question.card);
            return checkDoneDistributingCards();
        }
      });
    };

    Game.prototype.askLeaderForTeam = function() {
      var _this = this;
      return this.ask([this.activePlayers[this.leader]], 'choosing the mission team ...', 'choosePlayers', {
        msg: 'Choose your mission team.',
        n: this.missionTeamSizes[this.mission - 1],
        players: this.getIds(this.activePlayers)
      }, function(_arg) {
        var context, response;
        response = _arg[0];
        context = {
          msg: "" + response.player + " chose mission team: " + (_this.nameList(response.choice)) + ".",
          team: response.choice,
          votes: []
        };
        _this.gameLog(context.msg);
        return _this.askForTeamApproval(_this.opinionMakers, context, function(context) {
          return _this.askForTeamApproval(_this.everyoneExcept(_this.opinionMakers), context, function(context) {
            return _this.checkTeamApproval(context);
          });
        });
      });
    };

    Game.prototype.askForTeamApproval = function(players, context, cb) {
      var _this = this;
      return this.ask(players, 'voting on the mission team ...', 'choose', {
        msg: context.msg,
        choices: ['Approve', 'Reject']
      }, function(responses) {
        var response, _i, _len;
        for (_i = 0, _len = responses.length; _i < _len; _i++) {
          response = responses[_i];
          _this.sendAll('vote', {
            player: response.player.id,
            vote: response.choice
          });
        }
        context.votes = context.votes.concat(responses);
        return cb(context);
      });
    };

    Game.prototype.checkTeamApproval = function(context) {
      var approvalList, player, playerIdsApproving, playerIdsOnTeam, vote,
        _this = this;
      playerIdsApproving = (function() {
        var _i, _len, _ref, _results;
        _ref = context.votes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          vote = _ref[_i];
          if (vote.choice === 'Approve') {
            _results.push(vote.player.id);
          }
        }
        return _results;
      })();
      playerIdsOnTeam = (function() {
        var _i, _len, _ref, _results;
        _ref = context.team;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          player = _ref[_i];
          _results.push(player.id);
        }
        return _results;
      })();
      approvalList = function(onTeam, approving) {
        return _this.nameList((function() {
          var _i, _len, _ref, _ref1, _ref2, _results;
          _ref = this.activePlayers;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            player = _ref[_i];
            if ((_ref1 = player.id, __indexOf.call(playerIdsApproving, _ref1) >= 0) === approving && (_ref2 = player.id, __indexOf.call(playerIdsOnTeam, _ref2) >= 0) === onTeam) {
              _results.push(player);
            }
          }
          return _results;
        }).call(_this));
      };
      this.gameLog('');
      this.gameLog("Team members approving: " + (approvalList(true, true)));
      this.gameLog("Team members rejecting: " + (approvalList(true, false)));
      this.gameLog("Non-team members approving: " + (approvalList(false, true)));
      this.gameLog("Non-team members rejecting: " + (approvalList(false, false)));
      this.gameLog('');
      if (playerIdsApproving.length > this.activePlayers.length / 2) {
        this.sendAllMsgAndGameLog("The mission team is APPROVED.");
        return this.askNoConfidencesToVetoTeam(context);
      } else {
        this.sendAllMsgAndGameLog("The mission team is REJECTED.");
        this.round++;
        return this.nextRound();
      }
    };

    Game.prototype.askNoConfidencesToVetoTeam = function(context) {
      var _this = this;
      return this.ask(this.whoeverHas('NoConfidence'), 'deciding whether to use NO CONFIDENCE ...', 'choose', {
        msg: 'Do you want to use NO CONFIDENCE?',
        choices: ['Yes', 'No']
      }, function(responses) {
        var noConfidence, response, _i, _len;
        noConfidence = null;
        for (_i = 0, _len = responses.length; _i < _len; _i++) {
          response = responses[_i];
          if (response.choice === 'Yes') {
            if (noConfidence != null) {
              response.player.sendMsg("" + noConfidence + " has already played NO CONFIDENCE this round.");
            } else {
              noConfidence = response.player;
              _this.sendAllMsgAndGameLog("" + response.player + " used NO CONFIDENCE.");
              _this.subCard(response.player, 'NoConfidence');
              _this.round++;
            }
          }
        }
        if (noConfidence != null) {
          return _this.nextRound();
        } else {
          return _this.askInTheSpotlight(context);
        }
      });
    };

    Game.prototype.askInTheSpotlight = function(context) {
      var _this = this;
      return this.ask(this.whoeverHas('InTheSpotlight'), 'deciding whether to use IN THE SPOTLIGHT ...', 'choose', {
        msg: 'Do you want to use IN THE SPOTLIGHT?',
        choices: ['Yes', 'No']
      }, function(responses) {
        var response, _i, _len;
        for (_i = 0, _len = responses.length; _i < _len; _i++) {
          response = responses[_i];
          if (response.choice === 'Yes') {
            return _this.askQuestion(response.player, 'choosePlayers', {
              msg: 'Choose who you want to use IN THE SPOTLIGHT on.',
              n: 1,
              players: _this.getIds(context.team)
            }, function(response) {
              _this.sendAllMsgAndGameLog("" + response.player + " used IN THE SPOTLIGHT on " + response.choice[0]);
              _this.subCard(response.player, 'InTheSpotlight');
              context.spotlight = response.choice[0];
              return _this.askMissionMembersForVote(context);
            });
          }
        }
        return _this.askMissionMembersForVote(context);
      });
    };

    Game.prototype.askMissionMembersForVote = function(context) {
      var _this = this;
      return this.ask(context.team, 'voting on the success of the mission ...', 'choose', {
        msg: 'Do you want the mission to succeed or fail?',
        choices: ['Succeed', 'Fail']
      }, function(responses) {
        var response, _i, _len;
        context.votes = responses;
        for (_i = 0, _len = responses.length; _i < _len; _i++) {
          response = responses[_i];
          if (context.spotlight === response.player) {
            _this.sendAllMsgAndGameLog("" + context.spotlight + " voted for " + (response.choice === 'Succeed' ? 'SUCCESS' : 'FAILURE') + ".");
          }
        }
        return _this.askKeepingCloseEyes(context);
      });
    };

    Game.prototype.askKeepingCloseEyes = function(context) {
      var askDone, askOne, notUnderSuspicion, remaining, responses,
        _this = this;
      remaining = 0;
      responses = [];
      notUnderSuspicion = context.team.slice(0);
      askDone = function() {
        var response, vote, _i, _j, _len, _len1, _ref;
        for (_i = 0, _len = responses.length; _i < _len; _i++) {
          response = responses[_i];
          _this.sendAllMsgAndGameLog("" + response.player + " played KEEPING A CLOSE EYE ON YOU on " + response.choice + ".");
          _this.subCard(response.player, 'KeepingCloseEye');
          _ref = context.votes;
          for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
            vote = _ref[_j];
            if (vote.player === response.choice[0]) {
              response.player.sendMsg("" + response.choice + " voted for " + (vote.choice === 'Succeed' ? 'SUCCESS' : 'FAILURE') + ".");
            }
          }
        }
        return _this.checkMissionSuccess(context);
      };
      askOne = function(player) {
        ++remaining;
        return _this.askQuestion(player, 'choosePlayers', {
          msg: 'Choose who you want to use KEEPING A CLOSE EYE ON YOU on.',
          n: 1,
          players: _this.getIds(notUnderSuspicion)
        }, function(response) {
          var r, _i, _len;
          --remaining;
          for (_i = 0, _len = responses.length; _i < _len; _i++) {
            r = responses[_i];
            if (response.choice === r.choice) {
              return askOne(response.player);
            }
          }
          notUnderSuspicion.remove(response.choice);
          responses.push(response);
          if (remaining === 0) {
            return askDone();
          }
        });
      };
      return this.ask(this.whoeverHas('KeepingCloseEye'), 'deciding whether to use KEEPING A CLOSE EYE ON YOU ...', 'choose', {
        msg: 'Do you want to use KEEPING A CLOSE EYE ON YOU?',
        choices: ['Yes', 'No']
      }, function(responses) {
        var response, _i, _len;
        for (_i = 0, _len = responses.length; _i < _len; _i++) {
          response = responses[_i];
          if (response.choice === 'Yes') {
            askOne(response.player);
          }
        }
        if (remaining === 0) {
          return askDone();
        }
      });
    };

    Game.prototype.checkMissionSuccess = function(context) {
      var actualFailures, requiredFailures, score, success, vote;
      this.sendAll('clearvotes');
      requiredFailures = (this.mission === 4 && this.activePlayers.length > 6 ? 2 : 1);
      actualFailures = ((function() {
        var _i, _len, _ref, _results;
        _ref = context.votes;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          vote = _ref[_i];
          if (vote.choice !== 'Succeed') {
            _results.push(vote);
          }
        }
        return _results;
      })()).length;
      success = actualFailures < requiredFailures;
      this.sendAllMsgAndGameLog("The mission " + (success ? 'SUCCEEDED' : 'FAILED') + ". " + actualFailures + " player(s) voted for failure.");
      this.score.push(success);
      this.round = 1;
      this.mission++;
      if (((function() {
        var _i, _len, _ref, _results;
        _ref = this.score;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          score = _ref[_i];
          if (!score) {
            _results.push(score);
          }
        }
        return _results;
      }).call(this)).length === 3) {
        return this.spiesWin();
      }
      if (((function() {
        var _i, _len, _ref, _results;
        _ref = this.score;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          score = _ref[_i];
          if (score) {
            _results.push(score);
          }
        }
        return _results;
      }).call(this)).length === 3) {
        return this.resistanceWins();
      }
      return this.nextRound();
    };

    Game.prototype.spiesWin = function() {
      this.sendAllMsg("The spies win!");
      return this.gameOver();
    };

    Game.prototype.resistanceWins = function() {
      this.sendAllMsg("The resistance wins!");
      return this.gameOver();
    };

    Game.prototype.gameOver = function() {
      this.sendAll('scoreboard', this.getScoreboard());
      this.gameFinished = true;
      return this.db.finishGame(this.dbId, false, function() {});
    };

    Game.prototype.addCard = function(player, card) {
      this.sendAll('+card', {
        player: player.id,
        card: card
      });
      return this.cards.push({
        player: player,
        card: card
      });
    };

    Game.prototype.subCard = function(player, card) {
      this.sendAll('-card', {
        player: player.id,
        card: card
      });
      return this.cards.removeIf(function(i) {
        return i.player === player && i.card === card;
      });
    };

    Game.prototype.nameList = function(players) {
      var ans, i, _i, _ref;
      ans = '';
      for (i = _i = 0, _ref = players.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (i > 0 && players.length > 2) {
          ans += ',';
        }
        if (i > 0 && i === players.length - 1) {
          ans += ' and';
        }
        if (i > 0) {
          ans += ' ';
        }
        ans += players[i].name;
      }
      return ans;
    };

    Game.prototype.sendAll = function(msg, action, exempt) {
      var player, _i, _len, _ref, _results;
      if (exempt == null) {
        exempt = [];
      }
      _ref = this.players;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        _results.push(player.send(msg, action));
      }
      return _results;
    };

    Game.prototype.sendAllMsg = function(msg, exempt) {
      if (exempt == null) {
        exempt = [];
      }
      return this.sendAll('msg', {
        msg: msg
      });
    };

    Game.prototype.sendAllMsgAndGameLog = function(msg, exempt) {
      if (exempt == null) {
        exempt = [];
      }
      this.sendAllMsg(msg, exempt);
      return this.gameLog(msg);
    };

    Game.prototype.gameLog = function(msg) {
      var log;
      log = {
        mission: this.mission,
        round: this.round,
        msg: msg
      };
      this.sendAll('gamelog', log);
      return this.log.push(log);
    };

    Game.prototype.neighboringPlayers = function(player) {
      var ans, curPlayer, prevPlayer, _i, _len, _ref;
      ans = [];
      prevPlayer = this.activePlayers[this.activePlayers.length - 1];
      _ref = this.activePlayers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        curPlayer = _ref[_i];
        if (curPlayer === player) {
          ans.push(prevPlayer);
        }
        if (prevPlayer === player) {
          ans.push(curPlayer);
        }
        prevPlayer = curPlayer;
      }
      return ans;
    };

    Game.prototype.everyoneExcept = function(exempt) {
      var player, _i, _len, _ref, _results;
      if (exempt.length === 0) {
        return this.activePlayers;
      }
      _ref = this.activePlayers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        if (__indexOf.call(exempt, player) < 0) {
          _results.push(player);
        }
      }
      return _results;
    };

    Game.prototype.getIds = function(players) {
      var player, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = players.length; _i < _len; _i++) {
        player = players[_i];
        _results.push(player.id);
      }
      return _results;
    };

    Game.prototype.whoeverHas = function(cardName) {
      var card, player, players, _i, _len, _ref, _results;
      players = (function() {
        var _i, _len, _ref, _results;
        _ref = this.cards;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          card = _ref[_i];
          if (card.card === cardName) {
            _results.push(card.player);
          }
        }
        return _results;
      }).call(this);
      _ref = this.activePlayers;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        if (__indexOf.call(players, player) >= 0) {
          _results.push(player);
        }
      }
      return _results;
    };

    Game.prototype.onPlayersChanged = function() {
      var p, _i, _len, _ref;
      _ref = this.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        this.sendPlayers(p);
      }
      if (!this.gameStarted) {
        return this.askToStartGame();
      }
    };

    Game.prototype.sendPlayers = function(player) {
      var amSpy, p, response;
      amSpy = this.spies.some(function(i) {
        return i.id === player.id;
      });
      response = (function() {
        var _i, _len, _ref, _results;
        _ref = this.activePlayers;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          p = _ref[_i];
          _results.push({
            isSpy: amSpy && __indexOf.call(this.spies, p) >= 0,
            id: p.id,
            name: p.name
          });
        }
        return _results;
      }).call(this);
      return player.send('players', {
        players: response,
        amSpy: amSpy
      });
    };

    Game.prototype.askQuestion = function(player, cmd, action, cb) {
      var question;
      question = JSON.parse(JSON.stringify(action));
      question.cmd = cmd;
      question.choiceId = this.nextId++;
      this.questions.push({
        player: player,
        question: question,
        cb: cb
      });
      return player.send(cmd, question);
    };

    Game.prototype.ask = function(players, status, cmd, action, cb) {
      var context, isAre, player, _i, _len, _results,
        _this = this;
      if (players.length === 0) {
        return cb([]);
      }
      isAre = function(list) {
        if (list.length === 1) {
          return 'is';
        } else {
          return 'are';
        }
      };
      context = {
        responses: [],
        remaining: players.slice(0)
      };
      this.setStatus("" + (this.nameList(context.remaining)) + " " + (isAre(context.remaining)) + " " + status);
      _results = [];
      for (_i = 0, _len = players.length; _i < _len; _i++) {
        player = players[_i];
        _results.push(this.askQuestion(player, cmd, action, function(response) {
          context.responses.push(response);
          context.remaining.remove(response.player);
          if (context.remaining.length === 0) {
            return cb(context.responses);
          }
          return _this.setStatus("" + (_this.nameList(context.remaining)) + " " + (isAre(context.remaining)) + " " + status);
        }));
      }
      return _results;
    };

    Game.prototype.findQuestion = function(player, request) {
      var q, _i, _len, _ref;
      _ref = this.questions;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        q = _ref[_i];
        if (!(q.question.choiceId === request.choiceId)) {
          continue;
        }
        if (q.question.cmd !== request.cmd) {
          throw "Incorrect cmd";
        }
        if (player.id !== q.player.id) {
          throw "Incorrect responding player";
        }
        return q;
      }
      throw "Incorrect question";
    };

    Game.prototype.answerQuestion = function(question, choice) {
      question.choice = choice;
      this.questions.remove(question);
      return question.cb(question);
    };

    Game.prototype.findPlayer = function(playerId) {
      var p, _i, _len, _ref;
      _ref = this.activePlayers;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        if (p.id === playerId) {
          return p;
        }
      }
    };

    Game.prototype.setStatus = function(msg) {
      var p, _i, _len, _ref, _results;
      this.status = msg;
      _ref = this.players;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        p = _ref[_i];
        _results.push(p.send('status', {
          msg: msg
        }));
      }
      return _results;
    };

    Game.prototype.getInitialState = function() {
      var deck, i, j, spies, spiesRequired, _i, _j, _ref, _ref1, _ref2;
      spies = [];
      spiesRequired = Math.floor((this.activePlayers.length - 1) / 3) + 1;
      for (i = _i = 0, _ref = this.activePlayers.length; 0 <= _ref ? _i < _ref : _i > _ref; i = 0 <= _ref ? ++_i : --_i) {
        if (Math.random() < spiesRequired / (this.activePlayers.length - i)) {
          spies.push(this.activePlayers[i]);
          --spiesRequired;
        }
      }
      deck = ["TakeResponsibility", "OpinionMaker", "OpinionMaker", "NoConfidence", "NoConfidence", "NoConfidence", "StrongLeader", "StrongLeader", "KeepingCloseEye", "KeepingCloseEye"];
      if (this.activePlayers.length > 6) {
        deck = deck.concat(["EstablishConfidence", "Overheard", "Overheard", "InTheSpotlight", "OpenUp"]);
      }
      for (i = _j = 0, _ref1 = this.activePlayers.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        j = Math.random() * (this.activePlayers.length - i) + i;
        _ref2 = [deck[j], deck[i]], deck[i] = _ref2[0], deck[j] = _ref2[1];
      }
      return {
        spies: spies,
        deck: deck,
        leader: Math.floor(Math.random() * this.activePlayers.length)
      };
    };

    Game.prototype.getScoreboard = function() {
      return {
        round: this.round,
        missionTeamSizes: this.missionTeamSizes,
        score: this.score.slice(0)
      };
    };

    return Game;

  })(Room);

  Player = (function() {
    function Player(name, id, sessionKey, room) {
      this.name = name;
      this.id = id;
      this.sessionKey = sessionKey;
      this.room = room;
      this.connection = null;
      this.pendingMessages = [];
      this.room.onPlayerJoin(this);
    }

    Player.prototype.setRoom = function(newRoom) {
      this.room.onPlayerLeave(this);
      this.room = newRoom;
      return this.room.onPlayerJoin(this);
    };

    Player.prototype.onRequest = function(request) {
      return this.room.onRequest(this, request);
    };

    Player.prototype.send = function(cmd, params) {
      if (params == null) {
        params = {};
      }
      params.cmd = cmd;
      return this.pendingMessages.push(params);
    };

    Player.prototype.sendMsg = function(msg) {
      return this.send('msg', {
        msg: msg
      });
    };

    Player.prototype.toString = function() {
      return this.name;
    };

    Player.prototype.flush = function() {
      if (this.connection == null) {
        return;
      }
      if (this.pendingMessages.length === 0) {
        return;
      }
      this.connection.header('Cache-Control', 'no-cache');
      this.connection.json(this.pendingMessages);
      this.pendingMessages = [];
      return this.connection = null;
    };

    return Player;

  })();

  sql = require('sqlserver');

  Database = (function() {
    function Database() {}

    Database.prototype.initialize = function(cb) {
      var _this = this;
      sql.open(process.env.RESISTANCE_DB_CONNECTION_STRING, function(err, conn) {
        _this.connection = conn;
        return cb(err, conn);
      });
    };

    Database.prototype.addUser = function(name, password, email, cb) {
      return this.connection.query("INSERT Users(name, passwd, isValid, email) VALUES (?, HASHBYTES('sha2_256', ?), 1, ?)", [name, password, email], cb);
    };

    Database.prototype.getUserId = function(name, password, cb) {
      return this.connection.query("SELECT id FROM Users WHERE name=? AND passwd=HASHBYTES('sha2_256', ?) AND isValid=1", [name, password], function(err, result) {
        if (err) {
          return cb(err);
        }
        if (result.length !== 1) {
          return cb('not found');
        }
        return cb(null, result[0].id);
      });
    };

    Database.prototype.createGame = function(startData, players, cb) {
      return this.connection.query("BEGIN TRANSACTION CreateGame\n" + "SET XACT_ABORT ON\n" + "DECLARE @gameId INT\n" + "INSERT Games(startData) VALUES (?);\n" + "SET @gameId=@@IDENTITY\n" + (players.map(function(player, idx) {
        return "INSERT GamePlayers(gameId, seat, playerId, isSpy) VALUES (@gameId, " + idx + ", " + player.id + ", " + (player.isSpy ? 1 : 0) + ")\n";
      })).join('') + "COMMIT TRANSACTION CreateGame\n" + "SELECT @gameId AS id", [startData], function(err, result) {
        if (err) {
          return cb(err);
        }
        if (result.length > 0) {
          return cb(null, result[0].id);
        }
      });
    };

    Database.prototype.getUnfinishedGames = function(cb) {
      var parseResults;
      parseResults = function(players, gameLogs) {
        var gameId, games, logs, player, _i, _j, _len, _len1;
        games = {};
        for (_i = 0, _len = players.length; _i < _len; _i++) {
          player = players[_i];
          gameId = players.gameId;
          games[gameId] = games[gameId] || {
            gameId: gameId,
            players: [],
            gameLogs: []
          };
          games[gameId].players[player.seat] = {
            id: player.playerId,
            isSpy: player.isSpy
          };
        }
        for (_j = 0, _len1 = gameLogs.length; _j < _len1; _j++) {
          logs = gameLogs[_j];
          gameId = logs.gameId;
          games[gameId] = games[gameId] || {
            gameId: gameId,
            players: [],
            gameLogs: []
          };
          games[gameId].gameLogs.push({
            playerId: logs.playerId,
            action: logs.action
          });
        }
        return Object.keys(games).map(function(key) {
          return games[key];
        });
      };
      return this.connection.query("SELECT GamePlayers.* FROM Games, GamePlayers WHERE Games.id=GamePlayers.gameId AND Games.endTime IS NULL", function(err, players) {
        if (err) {
          return cb(err);
        }
        return this.connection.query("SELECT GameLog.* FROM Games, GameLogs WHERE Games.id=GameLog.gameId AND Games.endTime IS NULL ORDER BY id", function(err, gamelogs) {
          if (err) {
            return cb(err);
          }
          return cb(null, parseResults(players, gamelogs));
        });
      });
    };

    Database.prototype.updateGame = function(gameId, playerId, action, cb) {
      return this.connection.query("INSERT GameLog(gameId, playerId, action) VALUES (?, ?, ?)", [gameId, playerId, action], cb);
    };

    Database.prototype.finishGame = function(gameId, spiesWin, cb) {
      return this.connection.query("UPDATE Games SET endTime=SYSUTCDATETIME(), spiesWin=? WHERE id=?", [spiesWin, gameId], cb);
    };

    return Database;

  })();

  TestPlayer = (function(_super) {
    __extends(TestPlayer, _super);

    function TestPlayer() {
      TestPlayer.__super__.constructor.apply(this, arguments);
      this.choiceMap = [];
    }

    TestPlayer.prototype.send = function(cmd, params) {
      if (params == null) {
        params = {};
      }
      if (params.choiceId != null) {
        this.choiceMap.push(params.choiceId);
      }
      return TestPlayer.__super__.send.apply(this, arguments);
    };

    return TestPlayer;

  })(Player);

  TestGame = (function(_super) {
    __extends(TestGame, _super);

    function TestGame() {
      TestGame.__super__.constructor.apply(this, arguments);
    }

    TestGame.prototype.getInitialState = function() {
      return {
        spies: [this.activePlayers[1], this.activePlayers[2], this.activePlayers[5]],
        deck: ["StrongLeader", "Overheard", "TakeResponsibility", "InTheSpotlight", "NoConfidence", "OpinionMaker", "KeepingCloseEye", "EstablishConfidence", "Overheard", "OpenUp", "NoConfidence", "StrongLeader", "NoConfidence", "KeepingCloseEye", "OpinionMaker"],
        leader: 6
      };
    };

    return TestGame;

  })(Game);

  testGame = function() {
    var fakeDb, fakeLobby, game, msg, player1, player2, player3, player4, player5, player6, player7, playerObs, sendGame, _i, _len, _ref, _results;
    fakeDb = {
      createGame: function(startData, players, cb) {
        return cb(null, 6324);
      },
      updateGame: function() {},
      finishGame: function() {}
    };
    fakeLobby = {
      onGameEnd: function() {},
      onPlayerJoin: function() {},
      onPlayerLeave: function() {}
    };
    player1 = new TestPlayer('Alpha', 101, '', fakeLobby);
    player2 = new TestPlayer('Bravo', 102, '', fakeLobby);
    player3 = new TestPlayer('Charlie', 103, '', fakeLobby);
    player4 = new TestPlayer('Delta', 104, '', fakeLobby);
    player5 = new TestPlayer('Echo', 105, '', fakeLobby);
    player6 = new TestPlayer('Foxtrot', 106, '', fakeLobby);
    player7 = new TestPlayer('Golf', 107, '', fakeLobby);
    playerObs = new TestPlayer('Zulu', 200, '', fakeLobby);
    game = new TestGame(42, fakeLobby, fakeDb);
    sendGame = function(player, request) {
      if (request.choiceId != null) {
        request.choiceId = player.choiceMap[player.choiceMap.length + request.choiceId - 1];
      }
      return game.onRequest(player, request);
    };
    player1.setRoom(game);
    player2.setRoom(game);
    player3.setRoom(game);
    player4.setRoom(game);
    player5.setRoom(game);
    player6.setRoom(game);
    player7.setRoom(game);
    playerObs.setRoom(game);
    sendGame(player2, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Join'
    });
    sendGame(player3, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Join'
    });
    sendGame(player4, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Join'
    });
    sendGame(player5, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Join'
    });
    sendGame(player6, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Join'
    });
    sendGame(player7, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Join'
    });
    sendGame(player1, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'OK'
    });
    sendGame(player1, {
      cmd: 'chooseGiveCard',
      choiceId: 0,
      choice: 103
    });
    sendGame(player1, {
      cmd: 'chooseGiveCard',
      choiceId: -1,
      choice: 105
    });
    sendGame(player3, {
      cmd: 'choosePlayers',
      choiceId: 0,
      choice: [102]
    });
    sendGame(player1, {
      cmd: 'choosePlayers',
      choiceId: 0,
      choice: [101, 104]
    });
    sendGame(player3, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player4, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player6, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player2, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player1, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Reject'
    });
    sendGame(player7, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Reject'
    });
    sendGame(player5, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Reject'
    });
    sendGame(player1, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Succeed'
    });
    sendGame(player4, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Succeed'
    });
    sendGame(player5, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Yes'
    });
    sendGame(player5, {
      cmd: 'chooseGiveCard',
      choiceId: 0,
      choice: 102
    });
    sendGame(player5, {
      cmd: 'chooseGiveCard',
      choiceId: -1,
      choice: 107
    });
    sendGame(player7, {
      cmd: 'chooseTakeCard',
      choiceId: 0,
      choice: {
        player: 102,
        card: 'InTheSpotlight'
      }
    });
    sendGame(player5, {
      cmd: 'choosePlayers',
      choiceId: 0,
      choice: [101, 105, 106]
    });
    sendGame(player3, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player4, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Reject'
    });
    sendGame(player6, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player2, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player1, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Reject'
    });
    sendGame(player7, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Reject'
    });
    sendGame(player5, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Reject'
    });
    sendGame(player6, {
      cmd: 'choosePlayers',
      choiceId: 0,
      choice: [101, 102, 106]
    });
    sendGame(player3, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player4, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Reject'
    });
    sendGame(player6, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player2, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player1, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player7, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Reject'
    });
    sendGame(player5, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player7, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Yes'
    });
    sendGame(player7, {
      cmd: 'choosePlayers',
      choiceId: 0,
      choice: [106]
    });
    sendGame(player1, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Succeed'
    });
    sendGame(player2, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Succeed'
    });
    sendGame(player6, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Fail'
    });
    sendGame(player7, {
      cmd: 'chooseGiveCard',
      choiceId: 0,
      choice: 103
    });
    sendGame(player7, {
      cmd: 'chooseGiveCard',
      choiceId: -1,
      choice: 103
    });
    sendGame(player7, {
      cmd: 'choosePlayers',
      choiceId: 0,
      choice: [103, 104, 107]
    });
    sendGame(player3, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Reject'
    });
    sendGame(player4, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Reject'
    });
    sendGame(player6, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player2, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player1, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player7, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Reject'
    });
    sendGame(player5, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player3, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Yes'
    });
    sendGame(player1, {
      cmd: 'choosePlayers',
      choiceId: 0,
      choice: [101, 104, 105]
    });
    sendGame(player3, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player4, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Reject'
    });
    sendGame(player6, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player2, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player1, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player7, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Reject'
    });
    sendGame(player5, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player4, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Succeed'
    });
    sendGame(player5, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Succeed'
    });
    sendGame(player1, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Succeed'
    });
    sendGame(player2, {
      cmd: 'chooseGiveCard',
      choiceId: -1,
      choice: 103
    });
    sendGame(player2, {
      cmd: 'choosePlayers',
      choiceId: 0,
      choice: [106]
    });
    sendGame(player2, {
      cmd: 'choosePlayers',
      choiceId: 0,
      choice: [101, 102, 105, 106]
    });
    sendGame(player3, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player4, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Reject'
    });
    sendGame(player6, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player2, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player1, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player7, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Reject'
    });
    sendGame(player5, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player5, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Succeed'
    });
    sendGame(player2, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Fail'
    });
    sendGame(player1, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Succeed'
    });
    sendGame(player6, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Fail'
    });
    sendGame(player3, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Yes'
    });
    sendGame(player3, {
      cmd: 'choosePlayers',
      choiceId: 0,
      choice: [101]
    });
    sendGame(player3, {
      cmd: 'chooseGiveCard',
      choiceId: -1,
      choice: 107
    });
    sendGame(player7, {
      cmd: 'choosePlayers',
      choiceId: 0,
      choice: [101]
    });
    sendGame(player3, {
      cmd: 'chooseGiveCard',
      choiceId: 0,
      choice: 104
    });
    sendGame(player4, {
      cmd: 'choosePlayers',
      choiceId: 0,
      choice: [106]
    });
    sendGame(player1, {
      cmd: 'leave'
    });
    sendGame(player3, {
      cmd: 'choosePlayers',
      choiceId: 0,
      choice: [101, 103, 104, 107]
    });
    sendGame(player3, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player4, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Reject'
    });
    sendGame(player6, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player2, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    player1.setRoom(game);
    sendGame(player1, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player7, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Reject'
    });
    sendGame(player5, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Approve'
    });
    sendGame(player3, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Succeed'
    });
    sendGame(player7, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Succeed'
    });
    sendGame(player4, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Succeed'
    });
    sendGame(player1, {
      cmd: 'choose',
      choiceId: 0,
      choice: 'Succeed'
    });
    _ref = player2.pendingMessages;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      msg = _ref[_i];
      _results.push(console.log(JSON.stringify(msg)));
    }
    return _results;
  };

  testGame();

  console.log('Great success!');

}).call(this);
